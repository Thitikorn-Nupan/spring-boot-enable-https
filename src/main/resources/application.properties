spring.application.name=spring-boot-enable-https-crud-mysql
logging.level.root[0]=warn
logging.level.root[1]=debug
spring.main.banner-mode=off
spring.config.import=classpath:info/my_info.properties
# Just instead @RequestMapping(value="/api")
server.servlet.contextPath=/api

spring.datasource.url=${MYSQL_URL}
spring.datasource.username=${MYSQL_USERNAME}
spring.datasource.password=${MYSQL_PASSWORD}
spring.datasource.driver-class-name=${MYSQL_DRIVER}
spring.jpa.show-sql=true


# To enable SSL first you need a SSL certificate signed by a certification
# Either *** you can buy an SSL certificate
# *** Or If you only need to configure HTTPS to test your application, you can generate a self-signed certificate using a tool like OpenSSL.
# *** Public Key Cryptography Standards #12 (PKCS12).
# Here we are going to use Public Key Cryptography Standards #12 (PKCS12) to generate self-signed certificate.
# *** Step ***
# 1. run command on current cmd project (we call this keytool of jdk)
# *** keytool -genkey -alias localhost -storetype PKCS12 -keyalg RSA -keysize 2048 -keystore keystore.p12  -validity 3650
# 2. set password and answer all questions (can random it)
# 3. Copy the generated localhost-ssl.p12and paste it in src/main/resources location inside the project.
# 4. config follow below
server.ssl.enabled=true
server.ssl.key-store-password=arch.890.098
# This is the path the keystore which contains the SSL Certificate.
# Two ways to access file without import
# server.ssl.key-store=src/main/resources/localhost-ssl.p12
server.ssl.key-store=classpath:keystore.p12
# type of the keystore, it can be PKCS12 or any other keystore type.
server.ssl.key-store-type=PKCS12
# alias used to identify the key.
server.ssl.keyAlias=localhost